* EvoSuite 1.2.1-SNAPSHOT
* Configuration: EvoSuite_fixed-Dalgorithm=DynaMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence
* Starting Client-0
* Properties loaded from /Users/njimenez/Documents/Magister/100Clases/Test1/projects og/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 7221
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 23:43:00.050 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.Locale$IsoCountryCode
[MASTER] 23:43:00.055 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.lang.module.ModuleFinder
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 209
* Using seed 5072178650187
* Starting evolution
* Initial Number of Goals in DynaMOSA = 77 / 209
[MASTER] 23:43:08.706 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 23:43:58.292 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 23:44:32.458 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 181s and 2101 generations, 922453 statements, best individual has fitness: 55.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 37
* Number of covered goals: 37
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 27
* Number of covered goals: 27
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 46
* Number of covered goals: 46
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 100%
* Total number of goals: 64
* Number of covered goals: 64
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 70%
* Total number of goals: 30
* Number of covered goals: 21
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 27
* Number of covered goals: 27
* Generated 70 tests with total length 320
* Resulting test suite's coverage: 90% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 20%
* There are surviving mutants: 
--> Mutation 0: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.create(Ljava/util/Collection;Lorg/jcvi/jillion/core/residue/nt/NucleotideCodec;)Lorg/jcvi/jillion/core/residue/nt/NucleotideSequence;:73 - ReplaceComparisonOperator != null -> = null - Status: Killed
--> Mutation 1: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.create(Ljava/util/Collection;Lorg/jcvi/jillion/core/residue/nt/NucleotideCodec;)Lorg/jcvi/jillion/core/residue/nt/NucleotideSequence;:74 - ReplaceConstant - codec can not be null ->  - Status: Survived
--> Mutation 2: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.get(J)Lorg/jcvi/jillion/core/residue/nt/Nucleotide;:95 - InsertUnaryOp Negation of index - Status: Survived
--> Mutation 3: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.isGap(I)Z:104 - InsertUnaryOp Negation of index - Status: Survived
--> Mutation 4: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.isGap(I)Z:104 - InsertUnaryOp IINC 1 index - Status: Survived
--> Mutation 5: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.isGap(I)Z:104 - InsertUnaryOp IINC -1 index - Status: Survived
--> Mutation 6: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:109 - InsertUnaryOp Negation - Status: Survived
--> Mutation 7: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:109 - InsertUnaryOp +1 - Status: Survived
--> Mutation 8: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:109 - InsertUnaryOp -1 - Status: Survived
--> Mutation 9: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:109 - ReplaceComparisonOperator != -> -1 - Status: Survived
--> Mutation 10: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:109 - ReplaceComparisonOperator != -> < - Status: Survived
--> Mutation 11: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:109 - ReplaceComparisonOperator != -> > - Status: Survived
--> Mutation 12: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:109 - InsertUnaryOp Negation of length - Status: Survived
--> Mutation 13: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:109 - ReplaceConstant - 0 -> 1 - Status: Survived
--> Mutation 14: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:109 - ReplaceConstant - 0 -> -1 - Status: Survived
--> Mutation 15: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:109 - ReplaceComparisonOperator <= -> -1 - Status: Survived
--> Mutation 16: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:109 - ReplaceComparisonOperator <= -> == - Status: Survived
--> Mutation 17: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:109 - ReplaceComparisonOperator <= -> < - Status: Survived
--> Mutation 18: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:110 - ReplaceConstant - 31 -> 0 - Status: Survived
--> Mutation 19: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:110 - ReplaceConstant - 31 -> 1 - Status: Survived
--> Mutation 20: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:110 - ReplaceConstant - 31 -> -1 - Status: Survived
--> Mutation 21: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:110 - ReplaceConstant - 31 -> 30 - Status: Survived
--> Mutation 22: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:110 - ReplaceConstant - 31 -> 32 - Status: Survived
--> Mutation 23: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:111 - ReplaceConstant - 1 -> 0 - Status: Survived
--> Mutation 24: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:113 - ReplaceComparisonOperator == -> != - Status: Survived
--> Mutation 25: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceConstant - 31 -> 0 - Status: Survived
--> Mutation 26: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceConstant - 31 -> 1 - Status: Survived
--> Mutation 27: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceConstant - 31 -> -1 - Status: Survived
--> Mutation 28: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceConstant - 31 -> 30 - Status: Survived
--> Mutation 29: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceConstant - 31 -> 32 - Status: Survived
--> Mutation 30: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceVariable result -> prime - Status: Survived
--> Mutation 31: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - InsertUnaryOp Negation of result - Status: Survived
--> Mutation 32: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - InsertUnaryOp IINC 1 result - Status: Survived
--> Mutation 33: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - InsertUnaryOp IINC -1 result - Status: Survived
--> Mutation 34: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceArithmeticOperator * -> + - Status: Survived
--> Mutation 35: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceArithmeticOperator * -> % - Status: Survived
--> Mutation 36: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceArithmeticOperator * -> - - Status: Survived
--> Mutation 37: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceArithmeticOperator * -> / - Status: Survived
--> Mutation 38: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceArithmeticOperator + -> % - Status: Survived
--> Mutation 39: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceArithmeticOperator + -> - - Status: Survived
--> Mutation 40: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceArithmeticOperator + -> * - Status: Survived
--> Mutation 41: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:114 - ReplaceArithmeticOperator + -> / - Status: Survived
--> Mutation 42: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:116 - ReplaceVariable result -> prime - Status: Survived
--> Mutation 43: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:116 - InsertUnaryOp Negation of result - Status: Survived
--> Mutation 44: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:116 - InsertUnaryOp IINC 1 result - Status: Survived
--> Mutation 45: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:116 - InsertUnaryOp IINC -1 result - Status: Survived
--> Mutation 46: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:118 - InsertUnaryOp Negation - Status: Survived
--> Mutation 47: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:118 - InsertUnaryOp +1 - Status: Survived
--> Mutation 48: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.hashCode()I:118 - InsertUnaryOp -1 - Status: Survived
--> Mutation 49: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:123 - ReplaceComparisonOperator != -> == - Status: Killed
--> Mutation 50: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:124 - ReplaceConstant - 1 -> 0 - Status: Killed
--> Mutation 51: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:126 - ReplaceComparisonOperator != -> == - Status: Killed
--> Mutation 52: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:127 - ReplaceConstant - 0 -> 1 - Status: Killed
--> Mutation 53: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:130 - ReplaceComparisonOperator == -> -2 - Status: Killed
--> Mutation 54: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:130 - ReplaceComparisonOperator == -> >= - Status: Killed
--> Mutation 55: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:130 - ReplaceComparisonOperator == -> <= - Status: Killed
--> Mutation 56: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:131 - ReplaceConstant - 0 -> 1 - Status: Killed
--> Mutation 57: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:135 - ReplaceVariable iter -> otherIter - Status: Survived
--> Mutation 58: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:135 - ReplaceComparisonOperator == -> != - Status: Killed
--> Mutation 59: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:136 - ReplaceVariable iter -> otherIter - Status: Killed
--> Mutation 60: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:136 - ReplaceVariable otherIter -> iter - Status: Survived
--> Mutation 61: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:136 - ReplaceComparisonOperator != -> == - Status: Survived
--> Mutation 62: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:137 - ReplaceConstant - 0 -> 1 - Status: Killed
--> Mutation 63: org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence.equals(Ljava/lang/Object;)Z:140 - ReplaceConstant - 1 -> 0 - Status: Killed
* Compiling and checking tests
[MASTER] 23:46:13.503 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: java.lang.IllegalStateException: Could not self-attach to current VM using external process
[MASTER] 23:46:18.810 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: java.lang.IllegalStateException: Could not self-attach to current VM using external process
[MASTER] 23:46:24.081 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: java.lang.IllegalStateException: Could not self-attach to current VM using external process
[MASTER] 23:46:29.334 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: java.lang.IllegalStateException: Could not self-attach to current VM using external process
[MASTER] 23:46:34.587 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: java.lang.IllegalStateException: Could not self-attach to current VM using external process
[MASTER] 23:46:39.837 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: java.lang.IllegalStateException: Could not self-attach to current VM using external process
[MASTER] 23:46:45.073 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: java.lang.IllegalStateException: Could not self-attach to current VM using external process
[MASTER] 23:46:50.317 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: java.lang.IllegalStateException: Could not self-attach to current VM using external process
[MASTER] 23:46:55.562 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: java.lang.IllegalStateException: Could not self-attach to current VM using external process
[MASTER] 23:47:00.804 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: java.lang.IllegalStateException: Could not self-attach to current VM using external process
* Writing tests to file
* Writing JUnit test case 'DefaultNucleotideSequence_ESTest' to test_seeds/seed_1/tests
* Done!

* Computation finished
