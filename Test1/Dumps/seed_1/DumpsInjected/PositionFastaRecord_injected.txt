* EvoSuite 1.2.1-SNAPSHOT
* Configuration: EvoSuite_fixed
* Going to generate test cases for class: org.jcvi.jillion.fasta.pos.PositionFastaRecord
* Starting Client-0
* Properties loaded from /Users/njimenez/Documents/Magister/100Clases/Test1/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 3310
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.fasta.pos.PositionFastaRecord
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 160
* Using seed 2482030657809
* Starting evolution
* Initial Number of Goals in DynaMOSA = 90 / 160
* Search finished after 181s and 3667 generations, 1088595 statements, best individual has fitness: 10.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 28
* Number of covered goals: 28
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 98%
* Total number of goals: 65
* Number of covered goals: 64
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 15
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Generated 15 tests with total length 46
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 29%
* There are surviving mutants: 
--> Mutation 0: org.jcvi.jillion.fasta.pos.PositionFastaRecord.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/pos/PositionSequence;)V:40 - ReplaceVariable id -> comments - Status: Killed
--> Mutation 1: org.jcvi.jillion.fasta.pos.PositionFastaRecord.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/pos/PositionSequence;)V:40 - ReplaceComparisonOperator != null -> = null - Status: Killed
--> Mutation 2: org.jcvi.jillion.fasta.pos.PositionFastaRecord.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/pos/PositionSequence;)V:41 - ReplaceConstant - id can not be null ->  - Status: Survived
--> Mutation 3: org.jcvi.jillion.fasta.pos.PositionFastaRecord.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/pos/PositionSequence;)V:43 - ReplaceComparisonOperator != null -> = null - Status: Killed
--> Mutation 4: org.jcvi.jillion.fasta.pos.PositionFastaRecord.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/pos/PositionSequence;)V:44 - ReplaceConstant - positions can not be null ->  - Status: Survived
--> Mutation 5: org.jcvi.jillion.fasta.pos.PositionFastaRecord.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/pos/PositionSequence;)V:46 - ReplaceVariable id -> comments - Status: Killed
--> Mutation 6: org.jcvi.jillion.fasta.pos.PositionFastaRecord.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/pos/PositionSequence;)V:47 - ReplaceVariable comments -> id - Status: Killed
--> Mutation 7: org.jcvi.jillion.fasta.pos.PositionFastaRecord.toString()Ljava/lang/String;:71 - ReplaceConstant - PositionSequenceFastaRecord [identifier= ->  - Status: Killed
--> Mutation 8: org.jcvi.jillion.fasta.pos.PositionFastaRecord.toString()Ljava/lang/String;:71 - ReplaceConstant - , comments= ->  - Status: Killed
--> Mutation 9: org.jcvi.jillion.fasta.pos.PositionFastaRecord.toString()Ljava/lang/String;:71 - ReplaceConstant - , positions= ->  - Status: Killed
--> Mutation 10: org.jcvi.jillion.fasta.pos.PositionFastaRecord.toString()Ljava/lang/String;:71 - ReplaceConstant - ] ->  - Status: Killed
--> Mutation 11: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:78 - ReplaceConstant - 31 -> 0 - Status: Survived
--> Mutation 12: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:78 - ReplaceConstant - 31 -> 1 - Status: Survived
--> Mutation 13: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:78 - ReplaceConstant - 31 -> -1 - Status: Survived
--> Mutation 14: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:78 - ReplaceConstant - 31 -> 30 - Status: Survived
--> Mutation 15: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:78 - ReplaceConstant - 31 -> 32 - Status: Survived
--> Mutation 16: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:79 - ReplaceConstant - 1 -> 0 - Status: Survived
--> Mutation 17: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceConstant - 31 -> 0 - Status: Survived
--> Mutation 18: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceConstant - 31 -> 1 - Status: Survived
--> Mutation 19: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceConstant - 31 -> -1 - Status: Survived
--> Mutation 20: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceConstant - 31 -> 30 - Status: Survived
--> Mutation 21: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceConstant - 31 -> 32 - Status: Survived
--> Mutation 22: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceVariable result -> prime - Status: Survived
--> Mutation 23: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - InsertUnaryOp Negation of result - Status: Survived
--> Mutation 24: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - InsertUnaryOp IINC 1 result - Status: Survived
--> Mutation 25: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - InsertUnaryOp IINC -1 result - Status: Survived
--> Mutation 26: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceArithmeticOperator * -> + - Status: Survived
--> Mutation 27: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceArithmeticOperator * -> % - Status: Survived
--> Mutation 28: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceArithmeticOperator * -> - - Status: Survived
--> Mutation 29: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceArithmeticOperator * -> / - Status: Survived
--> Mutation 30: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceArithmeticOperator + -> % - Status: Survived
--> Mutation 31: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceArithmeticOperator + -> - - Status: Survived
--> Mutation 32: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceArithmeticOperator + -> * - Status: Survived
--> Mutation 33: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:80 - ReplaceArithmeticOperator + -> / - Status: Survived
--> Mutation 34: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceConstant - 31 -> 0 - Status: Survived
--> Mutation 35: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceConstant - 31 -> 1 - Status: Survived
--> Mutation 36: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceConstant - 31 -> -1 - Status: Survived
--> Mutation 37: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceConstant - 31 -> 30 - Status: Survived
--> Mutation 38: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceConstant - 31 -> 32 - Status: Survived
--> Mutation 39: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceVariable result -> prime - Status: Survived
--> Mutation 40: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - InsertUnaryOp Negation of result - Status: Survived
--> Mutation 41: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - InsertUnaryOp IINC 1 result - Status: Survived
--> Mutation 42: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - InsertUnaryOp IINC -1 result - Status: Survived
--> Mutation 43: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceArithmeticOperator * -> + - Status: Survived
--> Mutation 44: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceArithmeticOperator * -> % - Status: Survived
--> Mutation 45: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceArithmeticOperator * -> - - Status: Survived
--> Mutation 46: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceArithmeticOperator * -> / - Status: Survived
--> Mutation 47: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceArithmeticOperator + -> % - Status: Survived
--> Mutation 48: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceArithmeticOperator + -> - - Status: Survived
--> Mutation 49: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceArithmeticOperator + -> * - Status: Survived
--> Mutation 50: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:81 - ReplaceArithmeticOperator + -> / - Status: Survived
--> Mutation 51: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:82 - ReplaceVariable result -> prime - Status: Survived
--> Mutation 52: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:82 - InsertUnaryOp Negation of result - Status: Survived
--> Mutation 53: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:82 - InsertUnaryOp IINC 1 result - Status: Survived
--> Mutation 54: org.jcvi.jillion.fasta.pos.PositionFastaRecord.hashCode()I:82 - InsertUnaryOp IINC -1 result - Status: Survived
--> Mutation 55: org.jcvi.jillion.fasta.pos.PositionFastaRecord.equals(Ljava/lang/Object;)Z:88 - ReplaceComparisonOperator != -> == - Status: Killed
--> Mutation 56: org.jcvi.jillion.fasta.pos.PositionFastaRecord.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0 - Status: Killed
--> Mutation 57: org.jcvi.jillion.fasta.pos.PositionFastaRecord.equals(Ljava/lang/Object;)Z:91 - ReplaceComparisonOperator != -> == - Status: Killed
--> Mutation 58: org.jcvi.jillion.fasta.pos.PositionFastaRecord.equals(Ljava/lang/Object;)Z:92 - ReplaceConstant - 0 -> 1 - Status: Killed
--> Mutation 59: org.jcvi.jillion.fasta.pos.PositionFastaRecord.equals(Ljava/lang/Object;)Z:97 - ReplaceVariable other -> this - Status: Killed
--> Mutation 60: org.jcvi.jillion.fasta.pos.PositionFastaRecord.equals(Ljava/lang/Object;)Z:97 - ReplaceComparisonOperator == -> != - Status: Killed
--> Mutation 61: org.jcvi.jillion.fasta.pos.PositionFastaRecord.equals(Ljava/lang/Object;)Z:98 - ReplaceVariable other -> this - Status: Killed
--> Mutation 62: org.jcvi.jillion.fasta.pos.PositionFastaRecord.equals(Ljava/lang/Object;)Z:98 - ReplaceComparisonOperator == -> != - Status: Killed
--> Mutation 63: org.jcvi.jillion.fasta.pos.PositionFastaRecord.equals(Ljava/lang/Object;)Z:98 - ReplaceConstant - 1 -> 0 - Status: Killed
--> Mutation 64: org.jcvi.jillion.fasta.pos.PositionFastaRecord.equals(Ljava/lang/Object;)Z:98 - ReplaceConstant - 0 -> 1 - Status: Killed
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'PositionFastaRecord_ESTest' to test_seeds/seed_1/tests_injected
* Done!

* Computation finished
