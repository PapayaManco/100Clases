/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 10 02:51:05 GMT 2024
 */

package org.jcvi.jillion.fasta.pos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.fasta.pos.PositionFastaRecord;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PositionFastaRecord_ESTest extends PositionFastaRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("", "", positionSequence0);
      String string0 = positionFastaRecord0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("SO!OJoaE7%VN1HY6w", positionSequence0);
      String string0 = positionFastaRecord0.getComment();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("", "", positionSequence0);
      String string0 = positionFastaRecord0.getComment();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(positionSequence0).toString();
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("", "", positionSequence0);
      PositionSequence positionSequence1 = positionFastaRecord0.getSequence();
      PositionFastaRecord positionFastaRecord1 = new PositionFastaRecord("", positionSequence1);
      boolean boolean0 = positionFastaRecord1.equals(positionFastaRecord0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(positionSequence0).toString();
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("ljdj.f41Vln|G.G", "", positionSequence0);
      PositionSequence positionSequence1 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(positionSequence1).toString();
      PositionFastaRecord positionFastaRecord1 = new PositionFastaRecord("", "", positionSequence1);
      PositionSequence positionSequence2 = positionFastaRecord0.getSequence();
      PositionFastaRecord positionFastaRecord2 = new PositionFastaRecord("", "", positionSequence2);
      boolean boolean0 = positionFastaRecord2.equals(positionFastaRecord1);
      assertFalse(positionFastaRecord2.equals((Object)positionFastaRecord0));
      assertFalse(boolean0);
      assertEquals("", positionFastaRecord0.getComment());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("ljdj.f41Vln|G.G", "", positionSequence0);
      PositionSequence positionSequence1 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord1 = new PositionFastaRecord("", "", positionSequence1);
      boolean boolean0 = positionFastaRecord0.equals(positionFastaRecord1);
      assertEquals("ljdj.f41Vln|G.G", positionFastaRecord0.getId());
      assertEquals("", positionFastaRecord0.getComment());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("ljdj.f41Vln|G.G", "", positionSequence0);
      boolean boolean0 = positionFastaRecord0.equals(positionFastaRecord0);
      assertEquals("", positionFastaRecord0.getComment());
      assertEquals("ljdj.f41Vln|G.G", positionFastaRecord0.getId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("ljdj.f41Vln|G.G", "", positionSequence0);
      boolean boolean0 = positionFastaRecord0.equals("");
      assertEquals("ljdj.f41Vln|G.G", positionFastaRecord0.getId());
      assertEquals("", positionFastaRecord0.getComment());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PositionFastaRecord positionFastaRecord0 = null;
      try {
        positionFastaRecord0 = new PositionFastaRecord("=", "=", (PositionSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // positions can not be null
         //
         verifyException("org.jcvi.jillion.fasta.pos.PositionFastaRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PositionFastaRecord positionFastaRecord0 = null;
      try {
        positionFastaRecord0 = new PositionFastaRecord((String) null, (PositionSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.fasta.pos.PositionFastaRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(positionSequence0).toString();
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("ljdj.f41Vln|G.G", "", positionSequence0);
      positionFastaRecord0.hashCode();
      assertEquals("", positionFastaRecord0.getComment());
      assertEquals("ljdj.f41Vln|G.G", positionFastaRecord0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("IQbR#qCO<%/", "IQbR#qCO<%/", positionSequence0);
      String string0 = positionFastaRecord0.getComment();
      assertEquals("IQbR#qCO<%/", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("can not add null range to cache", "a}jRpNRM{w", positionSequence0);
      String string0 = positionFastaRecord0.getId();
      assertEquals("can not add null range to cache", string0);
      assertEquals("a}jRpNRM{w", positionFastaRecord0.getComment());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(positionSequence0).toString();
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("can not add null range to cache", "a}jRpNRM{w", positionSequence0);
      String string0 = positionFastaRecord0.toString();
      assertEquals("PositionSequenceFastaRecord [identifier=can not add null range to cache, comments=a}jRpNRM{w, positions=null]", string0);
  }
}
