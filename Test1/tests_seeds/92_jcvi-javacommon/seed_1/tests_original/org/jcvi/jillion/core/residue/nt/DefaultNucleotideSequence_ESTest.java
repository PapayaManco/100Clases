/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 12 07:40:36 GMT 2024
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.ACGTNNucloetideCodec;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence;
import org.jcvi.jillion.core.residue.nt.NoAmbiguitiesEncodedNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.jcvi.jillion.core.residue.nt.NucleotideCodec;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultNucleotideSequence_ESTest extends DefaultNucleotideSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byte[] byteArray1 = new byte[6];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray1);
      DefaultNucleotideSequence defaultNucleotideSequence1 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      boolean boolean0 = defaultNucleotideSequence0.equals(defaultNucleotideSequence1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      defaultNucleotideSequence0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      NucleotideSequence nucleotideSequence0 = DefaultNucleotideSequence.create(set0, noAmbiguitiesEncodedNucleotideCodec0);
      nucleotideSequence0.hashCode();
      nucleotideSequence0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      ArrayDeque<Nucleotide> arrayDeque0 = new ArrayDeque<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      arrayDeque0.addFirst(nucleotide0);
      NucleotideSequence nucleotideSequence0 = DefaultNucleotideSequence.create(arrayDeque0, noAmbiguitiesEncodedNucleotideCodec0);
      String string0 = ((DefaultNucleotideSequence) nucleotideSequence0).toString();
      assertEquals("G", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PriorityQueue<Nucleotide> priorityQueue0 = new PriorityQueue<Nucleotide>();
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      NucleotideSequence nucleotideSequence0 = DefaultNucleotideSequence.create(priorityQueue0, noAmbiguitiesEncodedNucleotideCodec0);
      String string0 = ((DefaultNucleotideSequence) nucleotideSequence0).toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, (long) (byte)0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideSequence0.iterator(range0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)1;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      boolean boolean0 = defaultNucleotideSequence0.isGap(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      int int0 = defaultNucleotideSequence0.getNumberOfGaps();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)1;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      int int0 = defaultNucleotideSequence0.getNumberOfGaps();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PriorityQueue<Nucleotide> priorityQueue0 = new PriorityQueue<Nucleotide>();
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      NucleotideSequence nucleotideSequence0 = DefaultNucleotideSequence.create(priorityQueue0, noAmbiguitiesEncodedNucleotideCodec0);
      long long0 = ((DefaultNucleotideSequence) nucleotideSequence0).getLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)1;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      long long0 = defaultNucleotideSequence0.getLength();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      long long0 = defaultNucleotideSequence0.getLength();
      assertEquals((-402653184L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)10;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      List<Integer> list0 = defaultNucleotideSequence0.getGapOffsets();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)39;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      Nucleotide nucleotide0 = defaultNucleotideSequence0.get(1L);
      assertEquals(Nucleotide.NotThymine, nucleotide0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      Nucleotide nucleotide0 = defaultNucleotideSequence0.get(1L);
      assertTrue(nucleotide0.isGap());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(aCGTNNucloetideCodec0, (byte[]) null);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -402653184
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not call getNext()
         //
         verifyException("org.jcvi.jillion.internal.core.io.ValueSizeStrategy$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 41 out of bounds for length 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.TwoBitEncodedNucleotideCodec$IteratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PriorityQueue<Nucleotide> priorityQueue0 = new PriorityQueue<Nucleotide>();
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      NucleotideSequence nucleotideSequence0 = DefaultNucleotideSequence.create(priorityQueue0, noAmbiguitiesEncodedNucleotideCodec0);
      // Undeclared exception!
      try { 
        ((DefaultNucleotideSequence) nucleotideSequence0).iterator((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.TwoBitEncodedNucleotideCodec$IteratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PriorityQueue<Nucleotide> priorityQueue0 = new PriorityQueue<Nucleotide>();
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      NucleotideSequence nucleotideSequence0 = DefaultNucleotideSequence.create(priorityQueue0, noAmbiguitiesEncodedNucleotideCodec0);
      Range range0 = Range.of(181L, 181L);
      // Undeclared exception!
      try { 
        ((DefaultNucleotideSequence) nucleotideSequence0).iterator(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 181 .. 181 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.TwoBitEncodedNucleotideCodec$IteratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(aCGTNNucloetideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.iterator((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not call getNext()
         //
         verifyException("org.jcvi.jillion.internal.core.io.ValueSizeStrategy$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      Range range0 = Range.ofLength((byte)41);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.iterator(range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 41 out of bounds for length 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.TwoBitEncodedNucleotideCodec$IteratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.iterator();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, (byte[]) null);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.iterator();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not call getNext()
         //
         verifyException("org.jcvi.jillion.internal.core.io.ValueSizeStrategy$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-5);
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.iterator();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -5 out of bounds for length 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.TwoBitEncodedNucleotideCodec$IteratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.isGap(2549);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, (byte[]) null);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.isGap(31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.isGap((byte)46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not call getNext()
         //
         verifyException("org.jcvi.jillion.internal.core.io.ValueSizeStrategy$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.isGap((byte)46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 46 out of bounds for length 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.NoAmbiguitiesEncodedNucleotideCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.hashCode();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence((NucleotideCodec) null, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.hashCode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not call getNext()
         //
         verifyException("org.jcvi.jillion.internal.core.io.ValueSizeStrategy$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.getNumberOfGaps();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, (byte[]) null);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.getNumberOfGaps();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.getNumberOfGaps();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not call getNext()
         //
         verifyException("org.jcvi.jillion.internal.core.io.ValueSizeStrategy$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.getNumberOfGaps();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.getLength();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence((NucleotideCodec) null, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.getLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.getLength();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not call getNext()
         //
         verifyException("org.jcvi.jillion.internal.core.io.ValueSizeStrategy$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.getLength();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.TwoBitEncodedNucleotideCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.getGapOffsets();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, (byte[]) null);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.getGapOffsets();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.getGapOffsets();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not call getNext()
         //
         verifyException("org.jcvi.jillion.internal.core.io.ValueSizeStrategy$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.getGapOffsets();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 36 out of bounds for length 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.NoAmbiguitiesEncodedNucleotideCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.get(925L);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(noAmbiguitiesEncodedNucleotideCodec0, (byte[]) null);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.get(421075406L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PriorityQueue<Nucleotide> priorityQueue0 = new PriorityQueue<Nucleotide>();
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      NucleotideSequence nucleotideSequence0 = DefaultNucleotideSequence.create(priorityQueue0, noAmbiguitiesEncodedNucleotideCodec0);
      // Undeclared exception!
      try { 
        ((DefaultNucleotideSequence) nucleotideSequence0).get(5326L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // offset 5326 is >= length (0)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.TwoBitEncodedNucleotideCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(aCGTNNucloetideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.get(1390L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not call getNext()
         //
         verifyException("org.jcvi.jillion.internal.core.io.ValueSizeStrategy$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      DefaultNucleotideSequence defaultNucleotideSequence1 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence1.equals(defaultNucleotideSequence0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, (byte[]) null);
      DefaultNucleotideSequence defaultNucleotideSequence1 = new DefaultNucleotideSequence(defaultNucleotideCodec0, (byte[]) null);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence1.equals(defaultNucleotideSequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      DefaultNucleotideSequence defaultNucleotideSequence1 = new DefaultNucleotideSequence(aCGTNNucloetideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.equals(defaultNucleotideSequence1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not call getNext()
         //
         verifyException("org.jcvi.jillion.internal.core.io.ValueSizeStrategy$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      DefaultNucleotideSequence defaultNucleotideSequence1 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.equals(defaultNucleotideSequence1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NoAmbiguitiesEncodedNucleotideCodec noAmbiguitiesEncodedNucleotideCodec0 = NoAmbiguitiesEncodedNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        DefaultNucleotideSequence.create((Collection<Nucleotide>) null, noAmbiguitiesEncodedNucleotideCodec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.TwoBitEncodedNucleotideCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      // Undeclared exception!
      try { 
        DefaultNucleotideSequence.create(set0, aCGTNNucloetideCodec0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // only A,C,G,T supported : V
         //
         verifyException("org.jcvi.jillion.core.residue.nt.TwoBitEncodedNucleotideCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideSequence0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)1;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      ACGTNNucloetideCodec aCGTNNucloetideCodec0 = ACGTNNucloetideCodec.INSTANCE;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      DefaultNucleotideSequence defaultNucleotideSequence1 = new DefaultNucleotideSequence(aCGTNNucloetideCodec0, byteArray1);
      boolean boolean0 = defaultNucleotideSequence0.equals(defaultNucleotideSequence1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)1;
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      DefaultNucleotideSequence defaultNucleotideSequence1 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      boolean boolean0 = defaultNucleotideSequence0.equals(defaultNucleotideSequence1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)39;
      DefaultNucleotideSequence defaultNucleotideSequence1 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray1);
      boolean boolean0 = defaultNucleotideSequence1.equals(defaultNucleotideSequence0);
      assertFalse(defaultNucleotideSequence0.equals((Object)defaultNucleotideSequence1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      boolean boolean0 = defaultNucleotideSequence0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      boolean boolean0 = defaultNucleotideSequence0.equals(defaultNucleotideSequence0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      defaultNucleotideSequence0.hashCode();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Stack<Nucleotide> stack0 = new Stack<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Purine;
      stack0.add(nucleotide0);
      NucleotideSequence nucleotideSequence0 = DefaultNucleotideSequence.create(stack0, defaultNucleotideCodec0);
      nucleotideSequence0.hashCode();
      nucleotideSequence0.hashCode();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TreeSet<Nucleotide> treeSet0 = new TreeSet<Nucleotide>();
      // Undeclared exception!
      try { 
        DefaultNucleotideSequence.create(treeSet0, (NucleotideCodec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // codec can not be null
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Stack<Nucleotide> stack0 = new Stack<Nucleotide>();
      NucleotideSequence nucleotideSequence0 = DefaultNucleotideSequence.create(stack0, defaultNucleotideCodec0);
      // Undeclared exception!
      try { 
        ((DefaultNucleotideSequence) nucleotideSequence0).get(4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2147483645 out of bounds for length 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      List<Integer> list0 = defaultNucleotideSequence0.getGapOffsets();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      boolean boolean0 = defaultNucleotideSequence0.isGap(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.toString();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      DefaultNucleotideSequence defaultNucleotideSequence0 = new DefaultNucleotideSequence(defaultNucleotideCodec0, byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideSequence0.iterator((Range) null);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
