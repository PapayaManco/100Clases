/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 12 07:44:41 GMT 2024
 */

package org.jcvi.jillion.fasta.pos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.fasta.pos.PositionFastaRecord;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PositionFastaRecord_ESTest extends PositionFastaRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(positionSequence0).toString();
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("K=WjfG42", positionSequence0);
      positionFastaRecord0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("K=WjfG42", positionSequence0);
      String string0 = positionFastaRecord0.getId();
      assertEquals("K=WjfG42", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("positions can not be null", "positions can not be null", positionSequence0);
      String string0 = positionFastaRecord0.getComment();
      assertEquals("positions can not be null", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("", "", positionSequence0);
      String string0 = positionFastaRecord0.getComment();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PositionFastaRecord positionFastaRecord0 = null;
      try {
        positionFastaRecord0 = new PositionFastaRecord("CAzZpK", "CAzZpK", (PositionSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // positions can not be null
         //
         verifyException("org.jcvi.jillion.fasta.pos.PositionFastaRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("", positionSequence0);
      String string0 = positionFastaRecord0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(positionSequence0).toString();
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("\")-/Gg6eZn{L[$6M1", positionSequence0);
      PositionSequence positionSequence1 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(positionSequence1).toString();
      PositionFastaRecord positionFastaRecord1 = new PositionFastaRecord("\")-/Gg6eZn{L[$6M1", positionSequence1);
      boolean boolean0 = positionFastaRecord0.equals(positionFastaRecord1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(positionSequence0).toString();
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("", positionSequence0);
      PositionSequence positionSequence1 = positionFastaRecord0.getSequence();
      PositionFastaRecord positionFastaRecord1 = new PositionFastaRecord("", "", positionSequence1);
      boolean boolean0 = positionFastaRecord0.equals(positionFastaRecord1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("", positionSequence0);
      boolean boolean0 = positionFastaRecord0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("", positionSequence0);
      boolean boolean0 = positionFastaRecord0.equals(positionFastaRecord0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PositionFastaRecord positionFastaRecord0 = null;
      try {
        positionFastaRecord0 = new PositionFastaRecord("PositionSequenceFastaRecord [identifier=\")-/Gg6eZn{L[$6M1, comments=null, positions=Mock for PositionSequence, hashCode: 1968172948]", (PositionSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // positions can not be null
         //
         verifyException("org.jcvi.jillion.fasta.pos.PositionFastaRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = null;
      try {
        positionFastaRecord0 = new PositionFastaRecord((String) null, positionSequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.fasta.pos.PositionFastaRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("\")-/Gg6eZn{L[$6M1", positionSequence0);
      String string0 = positionFastaRecord0.getComment();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(positionSequence0).toString();
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("", positionSequence0);
      PositionSequence positionSequence1 = positionFastaRecord0.getSequence();
      PositionFastaRecord positionFastaRecord1 = new PositionFastaRecord("BX$e,.t]7y!", positionSequence1);
      boolean boolean0 = positionFastaRecord0.equals(positionFastaRecord1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(positionSequence0).toString();
      PositionFastaRecord positionFastaRecord0 = new PositionFastaRecord("", positionSequence0);
      String string0 = positionFastaRecord0.toString();
      assertEquals("PositionSequenceFastaRecord [identifier=, comments=null, positions=null]", string0);
  }
}
