/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 12 03:13:31 GMT 2024
 */

package org.bouncycastle.asn1.pkcs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Hashtable;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERSet;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERNull;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERSet;
import org.bouncycastle.asn1.pkcs.CertificationRequestInfo;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.asn1.x509.X509Name;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CertificationRequestInfo_ESTest extends CertificationRequestInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSet bERSet0 = new BERSet(dEREncodableVector0);
      Vector<Object> vector0 = new Vector<Object>();
      Hashtable<Object, Object> hashtable0 = new Hashtable<Object, Object>();
      X509Name x509Name0 = new X509Name(vector0, hashtable0);
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(x509Name0.DC, bERSet0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, algorithmIdentifier0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, (ASN1Set) null);
      ASN1Set aSN1Set0 = certificationRequestInfo0.getAttributes();
      assertNull(aSN1Set0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(0);
      X509Name x509Name0 = X509Name.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(x509Name0.SURNAME, bERTaggedObject0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, algorithmIdentifier0);
      BERSet bERSet0 = new BERSet(subjectPublicKeyInfo0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      ASN1Set aSN1Set0 = certificationRequestInfo0.getAttributes();
      assertSame(aSN1Set0, bERSet0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      DERNull dERNull0 = new DERNull();
      bERConstructedSequence0.addObject(dERNull0);
      // Undeclared exception!
      try { 
        CertificationRequestInfo.getInstance(bERConstructedSequence0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.bouncycastle.asn1.DERNull cannot be cast to class org.bouncycastle.asn1.DERInteger (org.bouncycastle.asn1.DERNull and org.bouncycastle.asn1.DERInteger are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @363361c2)
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CertificationRequestInfo certificationRequestInfo0 = null;
      try {
        certificationRequestInfo0 = new CertificationRequestInfo((ASN1Sequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      BERSequence bERSequence1 = new BERSequence(bERSequence0);
      CertificationRequestInfo certificationRequestInfo0 = null;
      try {
        certificationRequestInfo0 = new CertificationRequestInfo(bERSequence1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.bouncycastle.asn1.BERSequence cannot be cast to class org.bouncycastle.asn1.DERInteger (org.bouncycastle.asn1.BERSequence and org.bouncycastle.asn1.DERInteger are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @363361c2)
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      CertificationRequestInfo certificationRequestInfo0 = null;
      try {
        certificationRequestInfo0 = new CertificationRequestInfo(bERConstructedSequence0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      X509Name x509Name0 = new X509Name(bERSequence0);
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(x509Name0.NAME_AT_BIRTH);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, x509Name0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, (ASN1Set) null);
      certificationRequestInfo0.version = null;
      DERSequence dERSequence0 = (DERSequence)certificationRequestInfo0.getDERObject();
      CertificationRequestInfo certificationRequestInfo1 = null;
      try {
        certificationRequestInfo1 = new CertificationRequestInfo(dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not all mandatory fields set in CertificationRequestInfo generator.
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      X509Name x509Name0 = new X509Name(bERSequence0);
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(x509Name0.NAME_AT_BIRTH);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, x509Name0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, (ASN1Set) null);
      certificationRequestInfo0.subject = null;
      DERSequence dERSequence0 = (DERSequence)certificationRequestInfo0.getDERObject();
      CertificationRequestInfo certificationRequestInfo1 = null;
      try {
        certificationRequestInfo1 = new CertificationRequestInfo(dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not all mandatory fields set in CertificationRequestInfo generator.
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      X509Name x509Name0 = new X509Name(bERSequence0);
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(x509Name0.PLACE_OF_BIRTH);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, algorithmIdentifier0);
      DERSet dERSet0 = new DERSet();
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, dERSet0);
      DERSequence dERSequence0 = (DERSequence)certificationRequestInfo0.getDERObject();
      CertificationRequestInfo certificationRequestInfo1 = new CertificationRequestInfo(dERSequence0);
      assertEquals(4, dERSequence0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      X509Name x509Name0 = new X509Name(bERConstructedSequence0);
      BERSet bERSet0 = new BERSet(x509Name0);
      CertificationRequestInfo certificationRequestInfo0 = null;
      try {
        certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, (SubjectPublicKeyInfo) null, bERSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not all mandatory fields set in CertificationRequestInfo generator.
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BERSet bERSet0 = new BERSet((DEREncodable) null);
      CertificationRequestInfo certificationRequestInfo0 = null;
      try {
        certificationRequestInfo0 = new CertificationRequestInfo((X509Name) null, (SubjectPublicKeyInfo) null, bERSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not all mandatory fields set in CertificationRequestInfo generator.
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      X509Name x509Name0 = new X509Name(bERSequence0);
      // Undeclared exception!
      try { 
        CertificationRequestInfo.getInstance(x509Name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown object in factory
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSet bERSet0 = new BERSet(dEREncodableVector0);
      Vector<Object> vector0 = new Vector<Object>();
      Hashtable<Object, Object> hashtable0 = new Hashtable<Object, Object>();
      X509Name x509Name0 = new X509Name(vector0, hashtable0);
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(x509Name0.POSTAL_CODE, bERConstructedSequence0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, bERConstructedSequence0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      CertificationRequestInfo certificationRequestInfo1 = CertificationRequestInfo.getInstance(certificationRequestInfo0);
      assertSame(certificationRequestInfo0, certificationRequestInfo1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      // Undeclared exception!
      try { 
        CertificationRequestInfo.getInstance(bERSequence0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      X509Name x509Name0 = new X509Name(bERSequence0);
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(x509Name0.NAME_AT_BIRTH);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, x509Name0);
      BERSet bERSet0 = new BERSet();
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      X509Name x509Name1 = certificationRequestInfo0.getSubject();
      assertSame(x509Name1, x509Name0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      X509Name x509Name0 = new X509Name(bERSequence0);
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(x509Name0.NAME_AT_BIRTH);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, x509Name0);
      BERSet bERSet0 = new BERSet();
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      ASN1Set aSN1Set0 = certificationRequestInfo0.getAttributes();
      assertEquals("[]", aSN1Set0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      X509Name x509Name0 = new X509Name(bERSequence0);
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(x509Name0.NAME_AT_BIRTH);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, x509Name0);
      BERSet bERSet0 = new BERSet(x509Name0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      DERInteger dERInteger0 = certificationRequestInfo0.getVersion();
      assertNotNull(dERInteger0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hashtable<Object, Object> hashtable0 = new Hashtable<Object, Object>();
      X509Name x509Name0 = new X509Name((Vector) null, hashtable0);
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(x509Name0.ST);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, algorithmIdentifier0);
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[3];
      DERSet dERSet0 = new DERSet(aSN1EncodableArray0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, dERSet0);
      SubjectPublicKeyInfo subjectPublicKeyInfo1 = certificationRequestInfo0.getSubjectPublicKeyInfo();
      assertSame(subjectPublicKeyInfo0, subjectPublicKeyInfo1);
  }
}
