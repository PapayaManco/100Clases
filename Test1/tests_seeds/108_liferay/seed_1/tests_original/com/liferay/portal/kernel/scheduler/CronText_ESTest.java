/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 12 04:22:29 GMT 2024
 */

package com.liferay.portal.kernel.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.scheduler.CronText;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CronText_ESTest extends CronText_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      CronText cronText0 = new CronText(calendar0);
      assertEquals(0, cronText0.getInterval());
      
      cronText0.setInterval(2);
      assertEquals(1, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(350, 350, 350, 65533, 1773, (-1098));
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      assertEquals(1, cronText0.getFrequency());
      
      cronText0.setFrequency(4);
      int int0 = cronText0.getFrequency();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CronText cronText0 = new CronText((Calendar) null);
      cronText0.getStartDate();
      assertEquals(1, cronText0.getFrequency());
      assertEquals(0, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2, 2, 2, 2);
      mockGregorianCalendar0.setLenient(false);
      CronText cronText0 = new CronText(mockGregorianCalendar0, 2, 2);
      cronText0.getStartDate();
      assertEquals(2, cronText0.getInterval());
      assertEquals(2, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 12, 12, 0, 12);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      cronText0.getStartDate();
      assertEquals(1, cronText0.getFrequency());
      assertEquals(0, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      CronText cronText0 = new CronText(calendar0, 2, 20);
      calendar0.setMinimalDaysInFirstWeek((-2318));
      cronText0.getStartDate();
      assertEquals(2, cronText0.getFrequency());
      assertEquals(20, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      CronText cronText0 = new CronText(mockGregorianCalendar0, 7, 7);
      cronText0.getStartDate();
      assertEquals(7, cronText0.getFrequency());
      assertEquals(7, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2);
      mockGregorianCalendar0.setFirstDayOfWeek((-1221));
      CronText cronText0 = new CronText(mockGregorianCalendar0, 2, 2);
      cronText0.getStartDate();
      assertEquals(2, cronText0.getFrequency());
      assertEquals(2, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      CronText cronText0 = new CronText(calendar0);
      assertEquals(0, cronText0.getInterval());
      
      cronText0.setInterval(1);
      int int0 = cronText0.getInterval();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CronText cronText0 = new CronText((Calendar) null, 6, (-3051));
      int int0 = cronText0.getInterval();
      assertEquals((-3051), int0);
      assertEquals(6, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CronText cronText0 = new CronText((Calendar) null);
      // Undeclared exception!
      try { 
        cronText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.scheduler.CronText", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set(0, 2);
      CronText cronText0 = new CronText(mockGregorianCalendar0, 2, 2);
      // Undeclared exception!
      try { 
        cronText0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CronText cronText0 = null;
      try {
        cronText0 = new CronText((Calendar) null, (-8), (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -8
         //
         verifyException("com.liferay.portal.kernel.scheduler.CronText", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CronText cronText0 = new CronText((Calendar) null, 7, (-2));
      cronText0.setFrequency(7);
      assertEquals((-2), cronText0.getInterval());
      assertEquals(7, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2);
      CronText cronText0 = new CronText(mockGregorianCalendar0, 2, 2);
      cronText0.setFrequency(2);
      assertEquals(2, cronText0.getInterval());
      assertEquals(2, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "");
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      CronText cronText0 = new CronText(mockGregorianCalendar0, 6, (-1626));
      cronText0.setFrequency(6);
      assertEquals(6, cronText0.getFrequency());
      assertEquals((-1626), cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(350, 350, 350, 65533, 1773, (-1098));
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      assertEquals(1, cronText0.getFrequency());
      
      cronText0.setFrequency(5);
      assertEquals(5, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      CronText cronText0 = new CronText(calendar0);
      cronText0.setFrequency(1);
      assertEquals(1, cronText0.getFrequency());
      assertEquals(0, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, (-585), 5, (-585), 3, (-1971));
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      assertEquals(1, cronText0.getFrequency());
      
      cronText0.setFrequency(3);
      assertEquals(3, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(350, 350, 350, 65533, 1773, (-1098));
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      assertEquals(1, cronText0.getFrequency());
      
      cronText0.setFrequency(4);
      cronText0.toString();
      assertEquals(4, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      CronText cronText0 = new CronText(calendar0, 2, 20);
      String string0 = cronText0.toString();
      assertEquals("21 */20 * * * ? *", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(350, 350, 350, 65533, 1773, (-1098));
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      String string0 = cronText0.toString();
      assertEquals("42 14 18 6 8 ? 387", string0);
      assertEquals(0, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CronText cronText0 = new CronText(mockGregorianCalendar0, 7, 7);
      String string0 = cronText0.toString();
      assertEquals("21 21 20 14 2 ? 2014/7", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CronText cronText0 = new CronText(mockGregorianCalendar0, 5, 5);
      String string0 = cronText0.toString();
      assertEquals("21 21 20 14/35 * ? *", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CronText cronText0 = new CronText(mockGregorianCalendar0, 6, 6);
      String string0 = cronText0.toString();
      assertEquals("21 21 20 14 2/6 ? *", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      CronText cronText0 = new CronText(calendar0, 2, 20);
      // Undeclared exception!
      try { 
        cronText0.setFrequency(20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 20
         //
         verifyException("com.liferay.portal.kernel.scheduler.CronText", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 3, 3, 3, 3, 3);
      CronText cronText0 = new CronText(mockGregorianCalendar0, 3, 3);
      String string0 = cronText0.toString();
      assertEquals("3 * */3 * * ? *", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1243), 0, 1523);
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      int int0 = cronText0.getInterval();
      assertEquals(0, int0);
      assertEquals(1, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CronText cronText0 = new CronText(mockGregorianCalendar0, 7, 7);
      cronText0.setStartDate(mockGregorianCalendar0);
      assertEquals(7, cronText0.getInterval());
      assertEquals(7, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(350, 350, 350, 65533, 1773, (-1098));
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      int int0 = cronText0.getFrequency();
      assertEquals(1, int0);
      assertEquals(0, cronText0.getInterval());
  }
}
