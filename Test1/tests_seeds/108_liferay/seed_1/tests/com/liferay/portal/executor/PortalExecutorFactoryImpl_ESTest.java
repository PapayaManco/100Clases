/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 09 23:15:10 GMT 2024
 */

package com.liferay.portal.executor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.executor.PortalExecutorFactoryImpl;
import com.liferay.portal.kernel.concurrent.ClearThreadLocalThreadPoolHandler;
import com.liferay.portal.kernel.concurrent.DiscardWithCancelPolicy;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PortalExecutorFactoryImpl_ESTest extends PortalExecutorFactoryImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      portalExecutorFactoryImpl0.setMaxQueueSize((-908));
      portalExecutorFactoryImpl0.setMaxPoolSize(1);
      // Undeclared exception!
      try { 
        portalExecutorFactoryImpl0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max queue size is less than or equal to 0
         //
         verifyException("com.liferay.portal.executor.PortalExecutorFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      portalExecutorFactoryImpl0.setMaxPoolSize((-4));
      // Undeclared exception!
      try { 
        portalExecutorFactoryImpl0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max pool size is less than or equal to 0
         //
         verifyException("com.liferay.portal.executor.PortalExecutorFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      DiscardWithCancelPolicy discardWithCancelPolicy0 = new DiscardWithCancelPolicy();
      portalExecutorFactoryImpl0.setRejectedExecutionHandler(discardWithCancelPolicy0);
      ClearThreadLocalThreadPoolHandler clearThreadLocalThreadPoolHandler0 = new ClearThreadLocalThreadPoolHandler();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      portalExecutorFactoryImpl0.setTimeUnit(timeUnit0);
      portalExecutorFactoryImpl0.setThreadPoolHandler(clearThreadLocalThreadPoolHandler0);
      portalExecutorFactoryImpl0.setMaxQueueSize(40);
      portalExecutorFactoryImpl0.setMaxPoolSize(40);
      portalExecutorFactoryImpl0.afterPropertiesSet();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      DiscardWithCancelPolicy discardWithCancelPolicy0 = new DiscardWithCancelPolicy();
      portalExecutorFactoryImpl0.setRejectedExecutionHandler(discardWithCancelPolicy0);
      ClearThreadLocalThreadPoolHandler clearThreadLocalThreadPoolHandler0 = new ClearThreadLocalThreadPoolHandler();
      portalExecutorFactoryImpl0.setThreadPoolHandler(clearThreadLocalThreadPoolHandler0);
      portalExecutorFactoryImpl0.setMaxQueueSize(40);
      portalExecutorFactoryImpl0.setMaxPoolSize(40);
      // Undeclared exception!
      try { 
        portalExecutorFactoryImpl0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time unit is null
         //
         verifyException("com.liferay.portal.executor.PortalExecutorFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      portalExecutorFactoryImpl0.setCorePoolSize(194);
      portalExecutorFactoryImpl0.setMaxPoolSize(1);
      // Undeclared exception!
      try { 
        portalExecutorFactoryImpl0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max pool size is less than core pool size
         //
         verifyException("com.liferay.portal.executor.PortalExecutorFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      portalExecutorFactoryImpl0.setKeepAliveTime((-1636L));
      // Undeclared exception!
      try { 
        portalExecutorFactoryImpl0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Keep alive time is less than 0
         //
         verifyException("com.liferay.portal.executor.PortalExecutorFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      portalExecutorFactoryImpl0.setCorePoolSize((-34));
      // Undeclared exception!
      try { 
        portalExecutorFactoryImpl0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Core pool size is less than 0
         //
         verifyException("com.liferay.portal.executor.PortalExecutorFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      // Undeclared exception!
      try { 
        portalExecutorFactoryImpl0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max pool size is less than or equal to 0
         //
         verifyException("com.liferay.portal.executor.PortalExecutorFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      portalExecutorFactoryImpl0.setCorePoolSize(1);
      portalExecutorFactoryImpl0.setMaxPoolSize(1);
      // Undeclared exception!
      try { 
        portalExecutorFactoryImpl0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max queue size is less than or equal to 0
         //
         verifyException("com.liferay.portal.executor.PortalExecutorFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
          // Undeclared exception!
          try { 
            portalExecutorFactoryImpl0.createPortalExecutor("r");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"getClassLoader.portal\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1606)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // com.liferay.portal.kernel.util.PortalClassLoaderUtil.getClassLoader(PortalClassLoaderUtil.java:38)
             // com.liferay.portal.security.pacl.PACLClassLoaderUtil.getPortalClassLoader(PACLClassLoaderUtil.java:64)
             // com.liferay.portal.executor.PortalExecutorFactoryImpl.createPortalExecutor(PortalExecutorFactoryImpl.java:74)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:834)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      DiscardWithCancelPolicy discardWithCancelPolicy0 = new DiscardWithCancelPolicy();
      portalExecutorFactoryImpl0.setRejectedExecutionHandler(discardWithCancelPolicy0);
      portalExecutorFactoryImpl0.setMaxQueueSize(40);
      portalExecutorFactoryImpl0.setMaxPoolSize(40);
      // Undeclared exception!
      try { 
        portalExecutorFactoryImpl0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Thread pool handler is null
         //
         verifyException("com.liferay.portal.executor.PortalExecutorFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      portalExecutorFactoryImpl0.setMaxQueueSize(40);
      portalExecutorFactoryImpl0.setMaxPoolSize(40);
      // Undeclared exception!
      try { 
        portalExecutorFactoryImpl0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Rejected execution handler is null
         //
         verifyException("com.liferay.portal.executor.PortalExecutorFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      portalExecutorFactoryImpl0.setKeepAliveTime(2005L);
      // Undeclared exception!
      try { 
        portalExecutorFactoryImpl0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max pool size is less than or equal to 0
         //
         verifyException("com.liferay.portal.executor.PortalExecutorFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PortalExecutorFactoryImpl portalExecutorFactoryImpl0 = new PortalExecutorFactoryImpl();
      portalExecutorFactoryImpl0.setAllowCoreThreadTimeout(true);
  }
}
