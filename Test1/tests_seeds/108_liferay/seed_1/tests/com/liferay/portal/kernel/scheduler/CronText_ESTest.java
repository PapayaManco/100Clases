/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 09 23:27:21 GMT 2024
 */

package com.liferay.portal.kernel.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.scheduler.CronText;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CronText_ESTest extends CronText_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      CronText cronText0 = new CronText(mockGregorianCalendar0, 2, (-1599));
      String string0 = cronText0.toString();
      assertEquals("21 */-1599 * * * ? *", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        cronText0.setFrequency(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("com.liferay.portal.kernel.scheduler.CronText", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CronText cronText0 = new CronText((Calendar) null);
      cronText0.getStartDate();
      assertEquals(0, cronText0.getInterval());
      assertEquals(1, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setLenient(false);
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      cronText0.getStartDate();
      assertEquals(1, cronText0.getFrequency());
      assertEquals(0, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      cronText0.getStartDate();
      assertEquals(0, cronText0.getInterval());
      assertEquals(1, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1257));
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      cronText0.getStartDate();
      assertEquals(1, cronText0.getFrequency());
      assertEquals(0, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setFirstDayOfWeek((-2085));
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      cronText0.getStartDate();
      assertEquals(1, cronText0.getFrequency());
      assertEquals(0, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      cronText0.setInterval(3402);
      int int0 = cronText0.getInterval();
      assertEquals(3402, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CronText cronText0 = new CronText(calendar0);
      cronText0.setInterval((-320));
      int int0 = cronText0.getInterval();
      assertEquals((-320), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CronText cronText0 = new CronText((Calendar) null);
      // Undeclared exception!
      try { 
        cronText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.scheduler.CronText", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 34, (-1));
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        cronText0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CronText cronText0 = null;
      try {
        cronText0 = new CronText(mockGregorianCalendar0, 2569, 2569);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2569
         //
         verifyException("com.liferay.portal.kernel.scheduler.CronText", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 7, (-1));
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      assertEquals(1, cronText0.getFrequency());
      
      cronText0.setFrequency(7);
      int int0 = cronText0.getFrequency();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 1852);
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      assertEquals(1, cronText0.getFrequency());
      
      cronText0.setFrequency(2);
      assertEquals(2, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3528, 25, 3528);
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      assertEquals(1, cronText0.getFrequency());
      
      cronText0.setFrequency(6);
      assertEquals(6, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, (-2756), 7);
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      assertEquals(1, cronText0.getFrequency());
      
      cronText0.setFrequency(4);
      assertEquals(4, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3528, 25, 3528);
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      assertEquals(1, cronText0.getFrequency());
      
      cronText0.setFrequency(5);
      assertEquals(5, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      CronText cronText0 = new CronText(gregorianCalendar0);
      cronText0.setFrequency(1);
      assertEquals(1, cronText0.getFrequency());
      assertEquals(0, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      assertEquals(1, cronText0.getFrequency());
      
      cronText0.setFrequency(3);
      assertEquals(3, cronText0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 7, (-1));
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      String string0 = cronText0.toString();
      assertEquals("0 0 0 30 7 ? 2", string0);
      assertEquals(0, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CronText cronText0 = new CronText(mockGregorianCalendar0, 5, 3);
      String string0 = cronText0.toString();
      assertEquals("21 21 20 14/21 * ? *", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CronText cronText0 = new CronText(mockGregorianCalendar0, 7, 4);
      String string0 = cronText0.toString();
      assertEquals("21 21 20 14 2 ? 2014/4", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CronText cronText0 = new CronText(mockGregorianCalendar0, 6, 1);
      String string0 = cronText0.toString();
      assertEquals("21 21 20 14 2/1 ? *", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CronText cronText0 = new CronText(mockGregorianCalendar0, 3, 3);
      String string0 = cronText0.toString();
      assertEquals("21 * */3 * * ? *", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CronText cronText0 = new CronText(mockGregorianCalendar0, 4, 4);
      String string0 = cronText0.toString();
      assertEquals("21 21 20 14/4 * ? *", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3528, 25, 3528);
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      int int0 = cronText0.getInterval();
      assertEquals(1, cronText0.getFrequency());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 7, (-1));
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      cronText0.setStartDate(mockGregorianCalendar0);
      assertEquals(1, cronText0.getFrequency());
      assertEquals(0, cronText0.getInterval());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      CronText cronText0 = new CronText(mockGregorianCalendar0);
      int int0 = cronText0.getFrequency();
      assertEquals(1, int0);
      assertEquals(0, cronText0.getInterval());
  }
}
