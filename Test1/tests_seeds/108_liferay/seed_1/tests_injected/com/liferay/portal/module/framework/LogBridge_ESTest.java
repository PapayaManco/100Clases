/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 12 09:53:44 GMT 2024
 */

package com.liferay.portal.module.framework;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.module.framework.LogBridge;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLTransientConnectionException;
import org.eclipse.equinox.log.internal.ExtendedLogEntryImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.osgi.framework.Bundle;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceReference;
import org.osgi.service.log.LogReaderService;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LogBridge_ESTest extends LogBridge_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LogBridge logBridge0 = new LogBridge();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "j=dpd7Ux(VCl&Ed{+#G", 151, sQLIntegrityConstraintViolationException0);
      ExtendedLogEntryImpl extendedLogEntryImpl0 = new ExtendedLogEntryImpl((Bundle) null, "", (Object) null, 0, "", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        logBridge0.logged(extendedLogEntryImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.module.framework.LogBridge", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LogBridge logBridge0 = new LogBridge();
      // Undeclared exception!
      try { 
        logBridge0.removedService((ServiceReference<LogReaderService>) null, (LogReaderService) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.module.framework.LogBridge", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LogBridge logBridge0 = new LogBridge();
      // Undeclared exception!
      try { 
        logBridge0.addingService((ServiceReference<LogReaderService>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.module.framework.LogBridge", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LogBridge logBridge0 = new LogBridge();
      try { 
        logBridge0.stop((BundleContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.module.framework.LogBridge", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LogBridge logBridge0 = new LogBridge();
      try { 
        logBridge0.start((BundleContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.osgi.util.tracker.ServiceTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LogBridge logBridge0 = new LogBridge();
      logBridge0.modifiedService((ServiceReference<LogReaderService>) null, (LogReaderService) null);
  }
}
