/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 12 08:15:55 GMT 2024
 */

package net.sourceforge.squirrel_sql.client.session.parser.kernel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.ErrorStream;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.Parser;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.ParserListener;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.SQLSchema;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.Scanner;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLModifyingStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLSelectStatement;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLSelectStatementListener;
import net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("\"DELETE\" ");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Scanner scanner1 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner1, (SQLSchema) null);
      parser0.parse();
      assertEquals(' ', scanner1.getLASTCHKEYINJECTED());
      assertEquals(1, errorStream0.getCOUNTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("\"CREATE+ ");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Scanner scanner1 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner1, (SQLSchema) null);
      parser0.parse();
      assertEquals(0, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parser parser0 = new Parser((Scanner) null, (SQLSchema) null);
      // Undeclared exception!
      try { 
        parser0.WeakSeparator(69, 69, 69);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("\"DISTINCT\" ");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(945);
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      boolean boolean0 = parser0.WeakSeparator((-2071), (-443), 0);
      assertEquals(1, scanner_SBuffer0.get_POSKEYINJECTED());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer(";N");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      parser0.parse();
      boolean boolean0 = parser0.Successful();
      assertEquals('\uFFFF', scanner0.getSTRCHKEYINJECTED());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("&wIB2");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(180);
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      parser0.WeakSeparator(0, 3863, 90);
      parser0.SemError(3863);
      assertEquals(0, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer(".");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(1121);
      parser0.addRootStatement(sQLSelectStatement0);
      assertEquals(2, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("\"CREATE+ ");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      parser0.Error(17);
      assertEquals(1, errorStream0.getCOUNTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("\"DISTINCT\" ");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement(498);
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      parser0.parse();
      String string0 = parser0.LookAheadString();
      assertEquals(' ', scanner0.getCHKEYINJECTED());
      assertEquals("\"DISTINCT\"", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("=oS");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement('\uFFFF');
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      parser0.parse();
      String string0 = parser0.LookAheadName();
      assertEquals(1, errorStream0.getCOUNTKEYINJECTED());
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("=oS");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement('\uFFFF');
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      parser0.parse();
      parser0.LexString();
      assertEquals('O', scanner0.getCHKEYINJECTED());
      assertEquals(1, errorStream0.getCOUNTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-2118));
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      parser0.parse();
      parser0.LexString();
      assertEquals(2, scanner0.getPOSKEYINJECTED());
      assertEquals(1, errorStream0.getCOUNTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("net.sourceforge.squirrel_sql.client.session.parser.kernel.Parser");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement((-2886));
      Parser parser0 = new Parser(scanner0, sQLSelectStatement0);
      parser0.parse();
      parser0.LexName();
      assertEquals(0, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement((-2118));
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      parser0.parse();
      parser0.LexName();
      assertEquals(2, scanner0.getPOSKEYINJECTED());
      assertEquals(1, errorStream0.getCOUNTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer(">J-");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      scanner_SBuffer0.chars = "";
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      // Undeclared exception!
      try { 
        parser0.parse();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(11);
      MockFile mockFile0 = new MockFile(";i");
      File file0 = MockFile.createTempFile(";i", ";i", (File) mockFile0);
      Scanner.FBuffer scanner_FBuffer0 = new Scanner.FBuffer(file0);
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_FBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, sQLSelectStatement0);
      scanner_FBuffer0._bufLen = 79;
      // Undeclared exception!
      try { 
        parser0.parse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.sourceforge.squirrel_sql.client.session.parser.kernel.Scanner$FBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(3);
      Parser parser0 = new Parser((Scanner) null, sQLSelectStatement0);
      // Undeclared exception!
      try { 
        parser0.addRootStatement(sQLSelectStatement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // internal error: recursive schema
         //
         verifyException("net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Parser parser0 = new Parser((Scanner) null, (SQLSchema) null);
      // Undeclared exception!
      try { 
        parser0.addRootStatement((SQLStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Parser parser0 = new Parser((Scanner) null, (SQLSchema) null);
      // Undeclared exception!
      try { 
        parser0.Successful();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.client.session.parser.kernel.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Parser parser0 = new Parser((Scanner) null, (SQLSchema) null);
      // Undeclared exception!
      try { 
        parser0.Error(71);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer(" Drop");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      scanner0.ch = ';';
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      parser0.parse();
      assertEquals('\uFFFF', scanner0.getSTRCHKEYINJECTED());
      assertEquals(1, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("CREATE\" ");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      parser0.parse();
      assertEquals(0, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("COMMIT");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      parser0.parse();
      assertEquals(5, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("DELETE ");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      parser0.parse();
      assertEquals(1, errorStream0.getCOUNTKEYINJECTED());
      assertEquals(1, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("\"ALTER\" ");
      ErrorStream errorStream0 = new ErrorStream();
      scanner_SBuffer0.read();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      // Undeclared exception!
      try { 
        parser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.client.session.parser.kernel.completions.SQLStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("=CREATE ");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      parser0.parse();
      parser0.WeakSeparator(3, 3, 3);
      assertEquals('\uFFFF', scanner0.getSTRCHKEYINJECTED());
      assertEquals(1, errorStream0.getCOUNTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(11);
      Parser parser0 = new Parser((Scanner) null, sQLSelectStatement0);
      // Undeclared exception!
      try { 
        parser0.WeakSeparator(0, 0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("=oS");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement('\uFFFF');
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      // Undeclared exception!
      try { 
        parser0.WeakSeparator((-1), 98, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("CASE");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      parser0.parse();
      assertEquals(1, errorStream0.getCOUNTKEYINJECTED());
      assertEquals('E', scanner0.getLASTCHKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      // Undeclared exception!
      try { 
        parser0.WeakSeparator(89, (-1339), (-1339));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("\"DISTINCT\" ");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement('\uFFFF');
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      boolean boolean0 = parser0.Successful();
      assertTrue(boolean0);
      assertEquals(2, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      errorStream0.count = (-1340);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      boolean boolean0 = parser0.Successful();
      assertEquals(2, parser0.getERRDISTKEYINJECTED());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer(">@J-");
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement('\uFFFF');
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      // Undeclared exception!
      try { 
        parser0.SemError('\uFFFF');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.client.session.parser.kernel.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("\"DISTINCT\" ");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement('\uFFFF');
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      parser0.WeakSeparator(99999, 2, 1);
      parser0.SemError(74);
      assertEquals(1, scanner_SBuffer0.get_POSKEYINJECTED());
      assertEquals(1, errorStream0.getCOUNTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement('\uFFFF');
      Parser parser0 = new Parser(scanner0, sQLSelectStatement0);
      parser0.addParserListener((ParserListener) null);
      // Undeclared exception!
      try { 
        parser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.client.session.parser.kernel.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("=oS");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement('\uFFFF');
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      parser0.LookAheadName();
      assertEquals(2, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Parser parser0 = new Parser((Scanner) null, (SQLSchema) null);
      parser0.removeSQLSelectStatementListener((SQLSelectStatementListener) null);
      assertEquals(2, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer(".");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      SQLSelectStatementListener sQLSelectStatementListener0 = mock(SQLSelectStatementListener.class, new ViolatedAssumptionAnswer());
      parser0.addSQLSelectStatementListener(sQLSelectStatementListener0);
      assertEquals(2, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer(".");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      ParserListener parserListener0 = mock(ParserListener.class, new ViolatedAssumptionAnswer());
      parser0.removeaddParserListener(parserListener0);
      assertEquals(2, parser0.getERRDISTKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("UPDATE");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      Parser parser0 = new Parser(scanner0, (SQLSchema) null);
      parser0.parse();
      assertEquals(1, errorStream0.getCOUNTKEYINJECTED());
      assertEquals(8, scanner0.getPOSKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("\"DISTINCT\" ");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement('\uFFFF');
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      // Undeclared exception!
      try { 
        parser0.LexString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.client.session.parser.kernel.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLSelectStatement sQLSelectStatement0 = new SQLSelectStatement(89);
      Parser parser0 = new Parser(scanner0, sQLSelectStatement0);
      // Undeclared exception!
      try { 
        parser0.LexName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.client.session.parser.kernel.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Scanner.SBuffer scanner_SBuffer0 = new Scanner.SBuffer("\"DISTINCT\" ");
      ErrorStream errorStream0 = new ErrorStream();
      Scanner scanner0 = new Scanner(scanner_SBuffer0, errorStream0);
      SQLModifyingStatement sQLModifyingStatement0 = new SQLModifyingStatement('\uFFFF');
      Parser parser0 = new Parser(scanner0, sQLModifyingStatement0);
      parser0.LookAheadString();
      assertEquals(2, parser0.getERRDISTKEYINJECTED());
  }
}
