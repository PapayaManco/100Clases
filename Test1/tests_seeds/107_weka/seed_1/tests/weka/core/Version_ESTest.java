/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 09 23:03:16 GMT 2024
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.Version;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Version_ESTest extends Version_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Version.MINOR = 4;
      Version.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Version.VERSION = "";
      Version.VERSION = "fwB-ZJLdwi=yr";
      Version.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Version version0 = new Version();
      boolean boolean0 = version0.isNewer("weka/core/version.txt");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Version version0 = new Version();
      Version.VERSION = "3.7.7";
      Version.VERSION = null;
      String string0 = version0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Version version0 = new Version();
      Version.VERSION = "weka/core/version.txt";
      Version.VERSION = null;
      Version.VERSION = "";
      String string0 = version0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Version version0 = new Version();
      boolean boolean0 = version0.isNewer(version0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Version version0 = new Version();
      boolean boolean0 = version0.isNewer("3.7.7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Version version0 = new Version();
      Version.MINOR = (-1);
      boolean boolean0 = version0.isOlder("3.7.7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Version version0 = new Version();
      boolean boolean0 = version0.equals("3.7.7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Version version0 = new Version();
      Version.MINOR = (-1);
      Version.MAJOR = (-1);
      Object object0 = new Object();
      int int0 = version0.compareTo(object0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Version version0 = new Version();
      Version.REVISION = (-127);
      int int0 = version0.compareTo("3.7.7");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Version version0 = new Version();
      Object object0 = new Object();
      Version.MAJOR = 2;
      Version.MAJOR = (-1);
      int int0 = version0.compareTo(object0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Version version0 = new Version();
      Version.MINOR = 0;
      int int0 = version0.compareTo("3.7.7");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Version version0 = new Version();
      Version.MAJOR = (-1073741822);
      int int0 = version0.compareTo(version0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Version version0 = new Version();
      Object object0 = new Object();
      int int0 = version0.compareTo(object0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Version version0 = new Version();
      int int0 = version0.compareTo("3.7.7");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Version version0 = new Version();
      Object object0 = new Object();
      boolean boolean0 = version0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Version version0 = new Version();
      boolean boolean0 = version0.isOlder("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Version version0 = new Version();
      String string0 = version0.toString();
      assertEquals("3.7.7", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Version version0 = new Version();
      String string0 = version0.getRevision();
      assertEquals("8034", string0);
  }
}
