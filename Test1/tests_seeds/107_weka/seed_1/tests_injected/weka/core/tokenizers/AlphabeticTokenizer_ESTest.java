/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 12 09:29:14 GMT 2024
 */

package weka.core.tokenizers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.Tokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AlphabeticTokenizer_ESTest extends AlphabeticTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      char[] charArray0 = new char[8];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x;\"&3`I";
      stringArray0[1] = "Z(+.d[7=~f'7ZHB";
      stringArray0[2] = "weka.core.tokenizers.AlphabeticTokenizer";
      stringArray0[3] = "Alphabetic string tokenizer, tokens are to be formed only from contiguous alphabetic sequences.";
      stringArray0[4] = "-*@CRkw6 f<h$!2Pd";
      Tokenizer.runTokenizer(alphabeticTokenizer0, stringArray0);
      alphabeticTokenizer0.m_Str = charArray0;
      // Undeclared exception!
      try { 
        alphabeticTokenizer0.nextElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more tokens present
         //
         verifyException("weka.core.tokenizers.AlphabeticTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*|zg1,ArO";
      stringArray0[1] = "N";
      stringArray0[2] = ".V#o*i5fwNC";
      stringArray0[3] = "6*dOUcL<8c \f3Z";
      stringArray0[4] = "";
      stringArray0[5] = "/";
      stringArray0[6] = "=x'FJu/";
      stringArray0[7] = "";
      stringArray0[8] = "$Revision: 8034 $";
      AlphabeticTokenizer.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9A89:!'TvE|u[<$<";
      stringArray0[1] = "";
      stringArray0[2] = "l\"8";
      stringArray0[3] = "";
      stringArray0[4] = "Alphabetic string tokenizer, tokens are to be formed only from contiguous alphabetic sequences.";
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Tokenizer.runTokenizer(alphabeticTokenizer0, stringArray0);
      char[] charArray0 = new char[1];
      alphabeticTokenizer0.m_Str = charArray0;
      alphabeticTokenizer0.hasMoreElements();
      assertEquals(95, alphabeticTokenizer0.getM_CURRENTPOSKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      alphabeticTokenizer0.tokenize("L");
      alphabeticTokenizer0.nextElement();
      assertEquals(1, alphabeticTokenizer0.getM_CURRENTPOSKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      alphabeticTokenizer0.tokenize("Alphabetic string tokenizer, tokens are to be formed only from contiguous alphabetic sequences.");
      boolean boolean0 = alphabeticTokenizer0.hasMoreElements();
      assertTrue(boolean0);
      assertEquals(0, alphabeticTokenizer0.getM_CURRENTPOSKEYINJECTED());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      // Undeclared exception!
      try { 
        alphabeticTokenizer0.tokenize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.tokenizers.AlphabeticTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      // Undeclared exception!
      try { 
        alphabeticTokenizer0.nextElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.tokenizers.AlphabeticTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      alphabeticTokenizer0.tokenize("r+rW3?%3R");
      alphabeticTokenizer0.m_CurrentPos = (-2177);
      // Undeclared exception!
      try { 
        alphabeticTokenizer0.nextElement();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2177 out of bounds for length 9
         //
         verifyException("weka.core.tokenizers.AlphabeticTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      // Undeclared exception!
      try { 
        alphabeticTokenizer0.hasMoreElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      alphabeticTokenizer0.tokenize("`MK9");
      alphabeticTokenizer0.m_CurrentPos = (-188);
      // Undeclared exception!
      try { 
        alphabeticTokenizer0.hasMoreElements();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x;\"&3`I";
      stringArray0[1] = "Z(+.d[7=~f'7ZHB";
      stringArray0[2] = "weka.core.tokenizers.AlphabeticTokenizer";
      stringArray0[3] = "Alphabetic string tokenizer, tokens are to be formed only from contiguous alphabetic sequences.";
      stringArray0[4] = "-*@CRkw6 f<h$!2Pd";
      Tokenizer.runTokenizer(alphabeticTokenizer0, stringArray0);
      // Undeclared exception!
      try { 
        alphabeticTokenizer0.nextElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more tokens present
         //
         verifyException("weka.core.tokenizers.AlphabeticTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      String string0 = alphabeticTokenizer0.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      String string0 = alphabeticTokenizer0.globalInfo();
      assertEquals("Alphabetic string tokenizer, tokens are to be formed only from contiguous alphabetic sequences.", string0);
  }
}
