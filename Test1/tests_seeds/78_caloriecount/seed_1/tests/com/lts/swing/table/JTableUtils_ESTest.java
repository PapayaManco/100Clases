/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 10 01:58:38 GMT 2024
 */

package com.lts.swing.table;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.swing.table.JTableUtils;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Stack;
import javax.swing.Action;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.TransferHandler;
import javax.swing.plaf.multi.MultiTableUI;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JTableUtils_ESTest extends JTableUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JTable jTable0 = new JTable(9, 9);
      JTableUtils.setColumnWidth(jTable0, 1, 1024);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JTable jTable0 = new JTable(984, 9);
      // Undeclared exception!
      try { 
        JTableUtils.setColumnWidth(jTable0, (-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JTable jTable0 = new JTable(980, 9);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 980;
      JTableUtils.setPreferredColumnPercents(jTable0, doubleArray0);
      assertFalse(jTable0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JTable jTable0 = new JTable(980, 9);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-59);
      JTableUtils.setPreferredColumnPercents(jTable0, doubleArray0);
      assertArrayEquals(new double[] {(-59.0), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JTable jTable0 = new JTable(1, 1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      JTableUtils.setPreferredColumnPercents2(jTable0, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JTable jTable0 = new JTable();
      JTableUtils.scrollToRow(jTable0, 0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JTable jTable0 = new JTable(984, 9);
      JScrollPane jScrollPane0 = new JScrollPane(jTable0);
      List<JScrollPane> list0 = List.of(jScrollPane0, jScrollPane0, jScrollPane0);
      JComboBox jComboBox0 = JTableUtils.setupComboBox(1, jTable0, list0);
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Action action0 = TransferHandler.getCopyAction();
      // Undeclared exception!
      try { 
        JTableUtils.setupDoubleClick((JTable) null, action0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JTableUtils.setupComboBox(2146359607, (JTable) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JTable jTable0 = new JTable(9, 9);
      // Undeclared exception!
      try { 
        JTableUtils.setupComboBox(9, jTable0, (String[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9 >= 9
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<JScrollPane> stack0 = new Stack<JScrollPane>();
      // Undeclared exception!
      try { 
        JTableUtils.setupComboBox(1473, (JTable) null, (List) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.setSelectedRow((JTable) null, 1178);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JTable jTable0 = new JTable(0, 0);
      // Undeclared exception!
      try { 
        JTableUtils.setSelectedRow(jTable0, (-2082));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2082
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JTable jTable0 = new JTable(9, 9);
      // Undeclared exception!
      try { 
        JTableUtils.setPreferredColumnPercents2(jTable0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.setPreferredColumnPercents((JTable) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JTable jTable0 = new JTable();
      double[] doubleArray0 = new double[8];
      MultiTableUI multiTableUI0 = new MultiTableUI();
      jTable0.setUI(multiTableUI0);
      // Undeclared exception!
      try { 
        JTableUtils.setPreferredColumnPercents(jTable0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.setColumnWidth((JTable) null, (-15), (-15));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.scrollToCell((JTable) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.getSelectedColumns((JTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.centerColumn(1653, (JTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JTable jTable0 = new JTable(9, 9);
      // Undeclared exception!
      try { 
        JTableUtils.centerColumn(9, jTable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9 >= 9
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.setSelectedRows((JTable) null, (-2378), (-2378));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JTable jTable0 = new JTable(9, 9);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 9;
      JTableUtils.setPreferredColumnPercents(jTable0, doubleArray0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JTable jTable0 = new JTable();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4604;
      JTableUtils.setPreferredColumnPercents(jTable0, doubleArray0);
      assertFalse(jTable0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JTable jTable0 = new JTable(1, 1);
      double[] doubleArray0 = new double[1];
      JTableUtils.setPreferredColumnPercents2(jTable0, doubleArray0);
      assertFalse(jTable0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JTable jTable0 = new JTable(9, 9);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        JTableUtils.setPreferredColumnPercents2(jTable0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JTable jTable0 = new JTable(9, 9);
      // Undeclared exception!
      try { 
        JTableUtils.getSelectedColumns(jTable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JTable jTable0 = new JTable(3125, 3125);
      jTable0.selectAll();
      List list0 = JTableUtils.getSelectedColumns(jTable0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JTable jTable0 = new JTable(1165, 1165);
      JScrollPane jScrollPane0 = new JScrollPane(jTable0);
      JViewport jViewport0 = jScrollPane0.getViewport();
      JScrollPane jScrollPane1 = new JScrollPane(jViewport0);
      JTableUtils.scrollToCell(jTable0, (-1), 1165);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JTable jTable0 = new JTable(1165, 1165);
      JScrollPane jScrollPane0 = new JScrollPane(jTable0);
      JTableUtils.scrollToCell(jTable0, 1, 0);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JTable jTable0 = new JTable(9, 9);
      JTableUtils.scrollToCell(jTable0, 1, 9);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JTable jTable0 = new JTable(1165, 1165);
      JTableUtils.centerColumn(1, jTable0);
      JTableUtils.centerColumn(1, jTable0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      JTableUtils.DoubleClickListener jTableUtils_DoubleClickListener0 = new JTableUtils.DoubleClickListener(defaultEditorKit_DefaultKeyTypedAction0);
      jTableUtils_DoubleClickListener0.doubleClick();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JTable jTable0 = new JTable();
      JTableUtils.DoubleClickListener jTableUtils_DoubleClickListener0 = new JTableUtils.DoubleClickListener((ActionListener) null);
      jTableUtils_DoubleClickListener0.showPopup(jTable0, 0, 710);
      assertFalse(jTable0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JTable jTable0 = new JTable();
      JTableUtils.setSelectedRow(jTable0, 1156);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JTable jTable0 = new JTable(793, 4954);
      String[] stringArray0 = new String[7];
      JComboBox jComboBox0 = JTableUtils.setupComboBox(793, jTable0, stringArray0);
      assertFalse(jComboBox0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JTable jTable0 = new JTable();
      List list0 = JTableUtils.getSelectedColumns(jTable0);
      // Undeclared exception!
      try { 
        JTableUtils.setupComboBox(0, jTable0, list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.scrollToRow((JTable) null, (-2378));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JTable jTable0 = new JTable(0, 0);
      JTableUtils.setupDoubleClick(jTable0, (ActionListener) null);
      assertFalse(jTable0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JTableUtils jTableUtils0 = new JTableUtils();
      Object[][] objectArray0 = new Object[2][2];
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) jTableUtils0;
      objectArray1[1] = (Object) jTableUtils0;
      JTable jTable0 = new JTable(objectArray0, objectArray1);
      JTableUtils.setSelectedRows(jTable0, 6, 40);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
  }
}
