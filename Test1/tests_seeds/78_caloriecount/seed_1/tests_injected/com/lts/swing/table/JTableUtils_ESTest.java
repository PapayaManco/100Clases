/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 12 12:06:08 GMT 2024
 */

package com.lts.swing.table;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.swing.table.JTableUtils;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.plaf.multi.MultiTableUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JTableUtils_ESTest extends JTableUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stringArray0, 0);
      JTable jTable0 = new JTable(defaultTableModel0);
      JTableUtils.setColumnWidth(jTable0, 0, 4);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<Stack<JScrollPane>> vector0 = new Vector<Stack<JScrollPane>>();
      JTable jTable0 = new JTable(vector0, vector0);
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 1.0;
      JTableUtils.setPreferredColumnPercents(jTable0, doubleArray0);
      assertFalse(jTable0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JTable jTable0 = new JTable(417, 417);
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (double) 417;
      JTableUtils.setPreferredColumnPercents(jTable0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 417.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JTable jTable0 = new JTable(417, 417);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (-926);
      JTableUtils.setPreferredColumnPercents(jTable0, doubleArray0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack<Vector<Vector<Vector>>> stack0 = new Stack<Vector<Vector<Vector>>>();
      Object[][] objectArray0 = new Object[2][4];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) stack0;
      JTable jTable0 = new JTable(objectArray0, objectArray1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 381;
      JTableUtils.setPreferredColumnPercents2(jTable0, doubleArray0);
      assertFalse(jTable0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JTable jTable0 = new JTable(411, 411);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7;
      // Undeclared exception!
      try { 
        JTableUtils.setPreferredColumnPercents2(jTable0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JTable jTable0 = new JTable();
      JScrollPane jScrollPane0 = new JScrollPane(jTable0);
      JViewport jViewport0 = jScrollPane0.getViewport();
      jViewport0.reshape((-2735), (-1064), 0, (-2735));
      JTableUtils.scrollToCell(jTable0, 1055, (-1));
      assertFalse(jTable0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JTable jTable0 = new JTable();
      jTable0.setBounds((-2144031804), (-2144031804), (-2144031804), 0);
      JScrollPane jScrollPane0 = new JScrollPane(jTable0);
      JTableUtils.scrollToCell(jTable0, (-2891), (-2891));
      assertFalse(jTable0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 0);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      JTableUtils.setSelectedRows(jTable0, 0, 931);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StyledEditorKit.ItalicAction styledEditorKit_ItalicAction0 = new StyledEditorKit.ItalicAction();
      JTableUtils.DoubleClickListener jTableUtils_DoubleClickListener0 = new JTableUtils.DoubleClickListener(styledEditorKit_ItalicAction0);
      jTableUtils_DoubleClickListener0.doubleClick();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JTable jTable0 = new JTable(417, 417);
      JTableUtils.setSelectedRow(jTable0, 15);
      assertFalse(jTable0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JTable jTable0 = new JTable(417, 417);
      String[] stringArray0 = new String[7];
      JComboBox jComboBox0 = JTableUtils.setupComboBox(383, jTable0, stringArray0);
      assertFalse(jComboBox0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      JTable jTable0 = new JTable(2864, 2005);
      JComboBox jComboBox0 = JTableUtils.setupComboBox(3, jTable0, (List) stack0);
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      // Undeclared exception!
      try { 
        JTableUtils.setupDoubleClick((JTable) null, styledEditorKit_BoldAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JTableUtils.setupComboBox(21, (JTable) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.setupComboBox(1400, (JTable) null, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<Vector<Vector<Vector>>> stack0 = new Stack<Vector<Vector<Vector>>>();
      JTable jTable0 = new JTable(stack0, stack0);
      // Undeclared exception!
      try { 
        JTableUtils.setSelectedRows(jTable0, 252, (-680));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -680
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.setSelectedRow((JTable) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.setPreferredColumnPercents2((JTable) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JTable jTable0 = new JTable();
      // Undeclared exception!
      try { 
        JTableUtils.setPreferredColumnPercents(jTable0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JTable jTable0 = new JTable();
      MultiTableUI multiTableUI0 = new MultiTableUI();
      jTable0.setUI(multiTableUI0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        JTableUtils.setPreferredColumnPercents(jTable0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      JTable jTable0 = new JTable(defaultTableModel0);
      // Undeclared exception!
      try { 
        JTableUtils.setColumnWidth(jTable0, 637, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 637 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.scrollToRow((JTable) null, (-810));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.scrollToCell((JTable) null, 2342, 2342);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.getSelectedColumns((JTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.centerColumn(2, (JTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JTable jTable0 = new JTable(376, 376);
      // Undeclared exception!
      try { 
        JTableUtils.centerColumn(376, jTable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 376 >= 376
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.setSelectedRows((JTable) null, 3325, 3325);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Object[] objectArray0 = new Object[2];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 380);
      JTable jTable0 = new JTable(defaultTableModel0);
      JTableUtils.setPreferredColumnPercents2(jTable0, doubleArray0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JTable jTable0 = new JTable(417, 417);
      // Undeclared exception!
      try { 
        JTableUtils.getSelectedColumns(jTable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JTable jTable0 = new JTable(354, 354);
      jTable0.selectAll();
      List list0 = JTableUtils.getSelectedColumns(jTable0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JTable jTable0 = new JTable();
      JScrollPane jScrollPane0 = new JScrollPane(jTable0);
      JViewport jViewport0 = jScrollPane0.getViewport();
      JScrollPane jScrollPane1 = new JScrollPane(jViewport0);
      JTableUtils.scrollToCell(jTable0, 0, (-32));
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JTable jTable0 = new JTable(0, 0);
      JTableUtils.scrollToCell(jTable0, 380, 1896);
      assertFalse(jTable0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JTable jTable0 = new JTable(375, 375);
      JTableUtils.centerColumn(353, jTable0);
      JTableUtils.centerColumn(353, jTable0);
      assertFalse(jTable0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector<Vector<Stack<Object>>> vector0 = new Vector<Vector<Stack<Object>>>();
      JTable jTable0 = new JTable(vector0, vector0);
      StyledEditorKit.FontSizeAction styledEditorKit_FontSizeAction0 = new StyledEditorKit.FontSizeAction("BEs", 403);
      JTableUtils.DoubleClickListener jTableUtils_DoubleClickListener0 = new JTableUtils.DoubleClickListener(styledEditorKit_FontSizeAction0);
      jTableUtils_DoubleClickListener0.showPopup(jTable0, 403, 403);
      assertFalse(jTable0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        JTableUtils.setColumnWidth((JTable) null, (-2142796460), (-2142796460));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.table.JTableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JTable jTable0 = new JTable();
      // Undeclared exception!
      try { 
        JTableUtils.setSelectedRow(jTable0, (-4773));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -4773
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JTable jTable0 = new JTable();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JTableUtils.setupComboBox((-1631), jTable0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JTable jTable0 = new JTable();
      List list0 = JTableUtils.getSelectedColumns(jTable0);
      // Undeclared exception!
      try { 
        JTableUtils.setupComboBox(1040, jTable0, list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1040 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JTable jTable0 = new JTable(0, 0);
      JTableUtils.scrollToRow(jTable0, 1896);
      assertFalse(jTable0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JTable jTable0 = new JTable(0, 0);
      DefaultEditorKit.PasteAction defaultEditorKit_PasteAction0 = new DefaultEditorKit.PasteAction();
      JTableUtils.setupDoubleClick(jTable0, defaultEditorKit_PasteAction0);
      assertFalse(jTable0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JTableUtils jTableUtils0 = new JTableUtils();
  }
}
